#include <fstream>#include <iostream> #include <math.h>//NOTE: Data in input files is ordered by column. First 100 elements corresponds to first column rather than first row.int main(){  //Read in data files and store here.  //Shouldn't need to actually store these. Just for testing.  double num[100][100]={0};  double ana[100][100]={0};  double dif[100][100]={0};  std::ifstream numerical, analytical;  numerical.open("potentialCompare.dat");  analytical.open("CylinderPotential.dat");  //Comparing how many points form the circle in the numerical and analytical data.  //Interestingly, numerical seems to give larger area for the same radius.  int isZero=0;  int numZero=0;  //Inputing numerical and analytical result data points.  for(int col=0;col<100;col++){    for(int row=0;row<100;row++){      double numElement, anaElement;      numerical>>numElement;      analytical>>anaElement;      if(anaElement==0){isZero++;}      if(numElement==0){numZero++;}           num[row][col]=numElement;      ana[row][col]=anaElement;      dif[row][col]=fabs(anaElement-numElement);    }  }      std::cout<<isZero<<" "<<numZero<<std::endl;    double mean=0;    for(int row=0;row<100;row++){      for(int col=0;col<100;col++){	mean+=dif[row][col];      }    }    std::cout<<mean/10000<<std::endl;    /*     //Want to check that radius of analytical and numerical solution match  //Set every non-zero point to 1 so that the circle points are easier to see.      std::ofstream numericalCirc, analyticalCirc;  numericalCirc.open("numericalCircle.dat");  analyticalCirc.open("analyticalCircle.dat");    for(int row=0;row<100;row++){    for(int col=0;col<100;col++){      if(num[row][col]!=0){	numericalCirc<<1<<" ";      }      else{	numericalCirc<<0<<" ";      }    }    numericalCirc<<"\n";  }           */  //Output is by row. Not column like input files.  //One for absolute differe, other for relative error.  std::ofstream difference, relative;  difference.open("potentialDiff.dat");  relative.open("relativeError.dat");  for(int row=0;row<100;row+=3){    for(int col=0;col<100;col+=3){      difference<<dif[row][col]<<" ";      //If analytical is zero at this point, set the result to zero.      //Is to avoid dividing by zero. Not sure if this is best way of handling this.      if(ana[row][col]==0){	relative<<0<<" ";      }      else{       	relative<<fabs(dif[row][col]/ana[row][col])<<" ";      }    }    difference<<"\n";    relative<<"\n";  }  }